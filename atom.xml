<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Her Blog</title>
  
  <subtitle>All things come to those who wait.</subtitle>
  <link href="/TongWenQian/atom.xml" rel="self"/>
  
  <link href="https://github.com/TongWenQian/TongWenQian/"/>
  <updated>2019-06-05T06:37:18.597Z</updated>
  <id>https://github.com/TongWenQian/TongWenQian/</id>
  
  <author>
    <name>柳梦璃</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日练习-Linux命令行基础</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/06/05/%E6%AF%8F%E6%97%A5%E7%BB%83%E4%B9%A0-Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/06/05/每日练习-Linux命令行基础/</id>
    <published>2019-06-05T04:08:27.000Z</published>
    <updated>2019-06-05T06:37:18.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-命令基础"><a href="#Linux-命令基础" class="headerlink" title="Linux 命令基础"></a>Linux 命令基础</h1><ol><li>什么是绝对路径？什么是相对路径？<br>答：绝对路径是指文件或者目录在硬盘上真正的路径，例如 <code>E:/user/1.png</code> ，”/“开头，代表根目录。相对路径是指相对于当前的文件的路径。例如：<code>./1.png</code> 表示当前目录下的 1.png 图片。  </li><li>如何查看当前位置的绝对路径？<br>答： 在当前位置输入 <code>pwd</code> 命令。<a id="more"></a></li><li>如何查看系统的当前用户？<br>答： 使用命令 <code>whoami</code>。</li><li>如何查看某个脚本命令的位置？（比如 node )<br>答： 以 node 为例，使用命令 <code>which node</code>。</li><li>请问使用||命令输出的当前路径下的文件信息中，前面的 -rwxr-xr-x 是什么意思？<br>答: 以从左到右顺序解释：<br>   1) 开头的 - 表示：文件<br>   2) r：可读<br>   3) w：可写<br>   4) x：表示可执行<br>   5) 第一个 r-x：用户所在组的权限<br>   6) 第二个 r-x：任意用户权限</li><li>**.*、./*、*.png 分别代表什么意思？<br>答：代表如下：<ul><li>**.*：所有 xx.xx 格式的文件</li><li>./*：表示当前目录下的所有文件和所有目录</li><li>*.png: 以 .png 结尾的文件</li></ul></li><li>sudo 是什么意思？<br>答： sudo 即 super user do ,它的意思是用超级管理员的权限执行（do）。</li><li>echo ‘aaa’ &gt; a.txt 与 echo ‘bbb’ &gt;&gt; b.txt 有什么区别？<br>答： echo ‘aaa’ &gt; a.txt 表示创建一个 a.txt (如果a.txt不存在）文件，并在 a.txt 中添加 aaa 内容，若再次往 a.txt 添加内容，会覆盖之前的内容。而 echo ‘bbb’ &gt;&gt; b.txt 表示在 b.txt 追加内容，不会覆盖本来就有的文件内容。</li><li>cat 命令能做什么？<br>答：可以进行如下使用：  <ul><li>cat filename：显示该文件内容  </li><li>cat &gt; filename：创建一个文件</li><li>cat filename1 filename2 &gt; filename：将两个文件合并成一个文件</li></ul></li><li>chmod +777 a.sh 是什么意思？ chmod 是什么？+777 是什么意思？<br>答： 表示任何人对 a.sh 都有读、写、运行三项权限。chmod 是目录或者文件权限设置的命令。由于读、写、运行三项权限可以用数字来表示，r=4,w=2,x=1，因此 777 表示 rwxrwxrwx ，即为该用户和其所在的组以及其他人都有最高的权限。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-命令基础&quot;&gt;&lt;a href=&quot;#Linux-命令基础&quot; class=&quot;headerlink&quot; title=&quot;Linux 命令基础&quot;&gt;&lt;/a&gt;Linux 命令基础&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;什么是绝对路径？什么是相对路径？&lt;br&gt;答：绝对路径是指文件或者目录在硬盘上真正的路径，例如 &lt;code&gt;E:/user/1.png&lt;/code&gt; ，”/“开头，代表根目录。相对路径是指相对于当前的文件的路径。例如：&lt;code&gt;./1.png&lt;/code&gt; 表示当前目录下的 1.png 图片。  &lt;/li&gt;
&lt;li&gt;如何查看当前位置的绝对路径？&lt;br&gt;答： 在当前位置输入 &lt;code&gt;pwd&lt;/code&gt; 命令。
    
    </summary>
    
      <category term="前端" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="每日练习" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/%E6%AF%8F%E6%97%A5%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="每日练习" scheme="https://github.com/TongWenQian/TongWenQian/tags/%E6%AF%8F%E6%97%A5%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出ES6（四）：模板字符串（转载）</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/06/04/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAES6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/06/04/深入浅出ES6（四）：模板字符串/</id>
    <published>2019-06-04T05:47:05.000Z</published>
    <updated>2019-06-04T06:21:48.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入浅出ES6（四）：模板字符串"><a href="#深入浅出ES6（四）：模板字符串" class="headerlink" title="深入浅出ES6（四）：模板字符串"></a>深入浅出ES6（四）：模板字符串</h1><h2 id="反撇号（-）基础知识"><a href="#反撇号（-）基础知识" class="headerlink" title="反撇号（`）基础知识"></a>反撇号（`）基础知识</h2><p>ES6引入了一种新型的字符串字面量语法，我们称之为模板字符串（template strings）。除了使用反撇号字符 ` 代替普通字符串的引号 ‘ 或 “ 外，它们看起来与普通字符串并无二致。在最简单的情况下，它们与普通字符串的表现一致：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.fillText(`Ceci n&apos;est pas une chaîne.`, x, y);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>但是我们并没有说：“原来只是被反撇号括起来的普通字符串啊”。模板字符串名之有理，它为JavaScript提供了简单的字符串插值功能，从此以后，你可以通过一种更加美观、更加方便的方式向字符串中插值了。<br>模板字符串的使用方式成千上万，但是最让我会心一暖的是将其应用于毫不起眼的错误消息提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function authorize(user, action) &#123;</span><br><span class="line">  if (!user.hasPrivilege(action)) &#123;</span><br><span class="line">    throw new Error(</span><br><span class="line">      `用户 $&#123;user.name&#125; 未被授权执行 $&#123;action&#125; 操作。`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个示例中，${user.name}和${action}被称为模板占位符，JavaScript将把user.name和action的值插入到最终生成的字符串中，例如：用户jorendorff未被授权打冰球。（这是真的，我还没有获得冰球许可证。）<br>到目前为止，我们所了解到的仅仅是比 + 运算符更优雅的语法，下面是你可能期待的一些特性细节：</p><ul><li>模板占位符中的代码可以是任意JavaScript表达式，所以函数调用、算数运算等这些都可以作为占位符使用，你甚至可以在一个模板字符串中嵌套另一个，我称之为模板套构  （template inception）。</li><li>如果这两个值都不是字符串，可以按照常规将其转换为字符串。例如：如果action是一个对象，将会调用它的.toString()方法将其转换为字符串值。</li><li>如果你需要在模板字符串中书写反撇号，你必须使用反斜杠将其转义：<code>\`</code>等价于”`”。</li><li>同样地，如果你需要在模板字符串中引入字符$和{。无论你要实现什么样的目标，你都需要用反斜杠转义每一个字符：<code>\$</code>和<code>\{</code>。<br>与普通字符串不同的是，模板字符串可以多行书写：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#warning&quot;).html(`</span><br><span class="line">  &lt;h1&gt;小心！&gt;/h1&gt;</span><br><span class="line">  &lt;p&gt;未经授权打冰球可能受罚</span><br><span class="line">  将近$&#123;maxPenalty&#125;分钟。&lt;/p&gt;</span><br><span class="line">`);</span><br></pre></td></tr></table></figure></li></ul><p>模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。</p><p>好啦，我说过要让你们轻松掌握模板字符串，从现在起难度会加大，你可以到此为止，去喝一杯咖啡，慢慢消化之前的知识。真的，及时回头不是一件令人感到羞愧的事情。Lopes Gonçalves曾经向我们证明过，船只不会被海妖碾压，也不会从地球的边缘坠落下去，他最终跨越了赤道，但是他有继续探索整个南半球么？并没有，他回家了，吃了一顿丰盛的午餐，你一定不排斥这样的感觉。</p><h2 id="反撇号的未来"><a href="#反撇号的未来" class="headerlink" title="反撇号的未来"></a>反撇号的未来</h2><p>当然，模板字符串也并非事事包揽：</p><ul><li>它们不会为你自动转义特殊字符，为了避免跨站脚本漏洞，你应当像拼接普通字符串时做的那样对非置信数据进行特殊处理。</li><li>它们无法很好地与国际化库（可以帮助你面向不同用户提供不同的语言）相配合，模板字符串不会格式化特定语言的数字和日期，更别提同时使用不同语言的情况了。</li><li>它们不能替代模板引擎的地位，例如：Mustache、Nunjucks。<br>模板字符串没有内建循环语法，所以你无法通过遍历数组来构建类似HTML中的表格，甚至它连条件语句都不支持。你当然可以使用模板套构（template inception）的方法实现，但在我看来这方法略显愚钝啊。</li></ul><p>不过，ES6为JS开发者和库设计者提供了一个很好的衍生工具，你可以借助这一特性突破模板字符串的诸多限制，我们称之为标签模板（tagged templates）。</p><p>标签模板的语法非常简单，在模板字符串开始的反撇号前附加一个额外的标签即可。我们的第一个示例将添加一个SaferHTML标签，我们要用这个标签来解决上述的第一个限制：自动转义特殊字符。</p><p>请注意，ES6标准库不提供类似SaferHTML功能，我们将在下面自己来实现这个功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var message =</span><br><span class="line">  SaferHTML`&lt;p&gt;$&#123;bonk.sender&#125; 向你示好。&lt;/p&gt;`;</span><br></pre></td></tr></table></figure></p><p>这里用到的标签是一个标识符SaferHTML；也可以使用属性值作为标签，例如：SaferHTML.escape；还可以是一个方法调用，例如：SaferHTML.escape({unicodeControlCharacters: false})。精确地说，任何ES6的成员表达式（MemberExpression）或调用表达式（CallExpression）都可作为标签使用。<br>可以看出，无标签模板字符串简化了简单字符串拼接，标签模板则完全简化了函数调用！<br>上面的代码等效于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var message =</span><br><span class="line">  SaferHTML(templateData, bonk.sender);</span><br></pre></td></tr></table></figure></p><p>templateData是一个不可变数组，存储着模板所有的字符串部分，由JS引擎为我们创建。因为占位符将标签模板分割为两个字符串的部分，所以这个数组内含两个元素，形如<code>Object.freeze([&quot;&lt;p&gt;&quot;, &quot; has sent you a bonk.&lt;/p&gt;&quot;]</code>。</p><p>（事实上，templateData中还有一个属性，在这篇文章中我们不会用到，但是它是标签模板不可分割的一环：templateData.raw，它同样是一个数组，存储着标签模板中所有的字符串部分，如果我们查看源码将会发现，在这里是使用形如\n的转义序列分行，而在templateData中则为真正的新行，标准标签String.raw会用到这些原生字符串。）</p><p>如此一来，SaferHTML函数就可以有成千上万种方法来解析字符串和占位符。</p><p>在继续阅读以前，可能你苦苦思索到底用SaferHTML来做什么，然后着手尝试去实现它，归根结底，它只是一个函数，你可以在Firefox的开发者控制台里测试你的成果。</p><p>以下是一种可行的方案（在gist中查看）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function SaferHTML(templateData) &#123;</span><br><span class="line">  var s = templateData[0];</span><br><span class="line">  for (var i = 1; i &lt; arguments.length; i++) &#123;</span><br><span class="line">    var arg = String(arguments[i]);</span><br><span class="line"> </span><br><span class="line">    // 转义占位符中的特殊字符。</span><br><span class="line">    s += arg.replace(/&amp;/g, &quot;&amp;&quot;)</span><br><span class="line">            .replace(/&lt;/g, &quot;&lt;&quot;)</span><br><span class="line">            .replace(/&lt;/g, &quot;&gt;&quot;);</span><br><span class="line"> </span><br><span class="line">    // 不转义模板中的特殊字符。</span><br><span class="line">    s += templateData[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过这样的定义，标签模板SaferHTML<code>&lt;p&gt;${bonk.sender} 向你示好。&lt;/p&gt;</code> 可能扩展为字符串 “<code>&lt;p&gt;ES6&lt;3er 向你示好。&lt;/p&gt;</code>“。即使一个恶意命名的用户，例如“<code>黑客Steve&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;</code>”，向其他用户发送一条骚扰信息，无论如何这条信息都会被转义为普通字符串，其他用户不会受到潜在攻击的威胁。</p><p>（顺便一提，如果你感觉上述代码中在函数内部使用参数对象的方式令你感到枯燥乏味，不妨期待下一篇大作，ES6中的另一个新特性一定会让你眼前一亮！）</p><p>仅一个简单的示例不足以说明标签模板的灵活性，我们一起回顾下我们之前有关模板字符串限制的列表，看一下你还能做些什么不一样的事情。</p><ul><li>模板字符串不会自动转义特殊字符。但是正如我们看到的那样，通过标签模板，你可以自己写一个标签函数来解决这个问题</li></ul><p>事实上，你可以做的比那更好。</p><p>站在安全角度来说，我实现的SaferHTML函数相当脆弱，你需要通过多种不同的方式将HTML不同部分的特殊字符转义，SaferHTML就无法做到全部转义。但是稍加努力，你就可以写出一个更加智能的SaferHTML函数，它可以针对templateData中字符串中的HTML位进行解析，分析出哪一个占位符是纯HTML；哪一个是元素内部属性，需要转义’和”；哪一个是URL的query字符串，需要进行URL转义而非HTML转义，等等。智能SaferHTML函数可以将每个占位符都正确转义。</p><p>HTML的解析速度很慢，这种方法听起来是否略显牵强？幸运的是，当模板重新求值的时候标签模板的字符串部分是不改变的。SaferHTML可以缓存所有的解析结果，来加速后续的调用。（缓存可以按照ES6的另一个特性——WeakMap的形式进行存储，我们将在未来的文章中继续深入讨论。）</p><ul><li>模板字符串没有内建的国际化特性，但是通过标签，我们可以添加这些功能。Jack Hsu的一篇博客文章展示了具体的实现过程。我谨在此处抛砖引玉：<br>i18n<code>Hello ${name}, you have ${amount}:c(CAD) in your bank account.</code><br>// =&gt; Hallo Bob, Sie haben 1.234,56 $CA auf Ihrem Bankkonto.</li></ul><p>注意观察这个示例中的运行细节，name和amount都是JavaScript，进行正常插值处理，但是有一段与众不同的代码，:c(CAD)，Jack将它放入了模板的字符串部分。JavaScript理应由JavaScript引擎进行处理，字符串部分由Jack的i18n标签进行处理。使用者可以通过i18n的文档了解到，:c(CAD)代表加拿大元的货币单位。</p><p>这就是标签模板的大部分实际应用了。</p><ul><li>模板字符串不能代替Mustache和Nunjucks，一部分原因是在模板字符串没有内建的循环或条件语句语法。我们一起来看如何解决这个问题，如果JS不提供这个特性，我们就写一个标签来提供相应支持。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 基于纯粹虚构的模板语言</span><br><span class="line">// ES6标签模板。</span><br><span class="line">var libraryHtml = hashTemplate`</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    #for book in $&#123;myBooks&#125;</span><br><span class="line">      &lt;li&gt;&lt;i&gt;#&#123;book.title&#125;&lt;/i&gt; by #&#123;book.author&#125;&lt;/li&gt;</span><br><span class="line">    #end</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure></li></ul><p>标签模板带来的灵活性远不止于此，要记住，标签函数的参数不会自动转换为字符串，它们如返回值一样，可以是任何值，标签模板甚至不一定要是字符串！你可以用自定义的标签来创建正则表达式、DOM树、图片、以promises为代表的整个异步过程、JS数据结构、GL着色器……</p><p><strong>标签模板以开放的姿态欢迎库设计者们来创建强有力的领域特定语言</strong>。这些语言可能看起来不像JS，但是它们仍可以无缝嵌入到JS中并与JS的其它语言特性智能交互。我不知道这一特性将会带领我们走向何方，但它蕴藏着无限的可能性，这令我感到异常兴奋！</p><h2 id="我什么时候可以开始使用这一特性？"><a href="#我什么时候可以开始使用这一特性？" class="headerlink" title="我什么时候可以开始使用这一特性？"></a>我什么时候可以开始使用这一特性？</h2><p>在服务器端，io.js支持ES6的模板字符串。</p><p>在浏览器端，Firefox 34+支持模板字符串。它们由去年夏天的实习生项目组里的Guptha Rajagopal实现。模板字符串同样在Chrome 41+中得以支持，但是IE和Safari都不支持。到目前为止，如果你想要在web端使用模板字符串的功能，你将需要Babel或Traceur协助你完成ES6到ES5的代码转译，你也可以在TypeScript中立即使用这一特性。</p><h2 id="等等——那么Markdown呢？"><a href="#等等——那么Markdown呢？" class="headerlink" title="等等——那么Markdown呢？"></a>等等——那么Markdown呢？</h2><p>嗯？</p><p>哦…这是个好问题。</p><p>（这一章节与JavaScript无关，如果你不使用Markdown，可以跳过这一章。）</p><p>对于模板字符串而言，Markdown和JavaScript现在都使用`字符来表示一些特殊的事物。事实上，在Markdown中，反撇号用来分割在内联文本中间的代码片段。</p><p>这会带来许多问题！如果你在Markdown中写这样的文档：</p><p>To display a message, write <code>alert(</code>hello world!<code>)</code>.<br>它将这样显示：</p><p>To display a message, write alert(hello world!).<br>请注意，输出文本中的反撇号消失了。Markdown将所有的四个反撇号解释为代码分隔符并用HTML标签将其替换掉。</p><p>为了避免这样的情况发生，我们要借助Markdown中的一个鲜为人知的特性，你可以使用多行反撇号作为代码分隔符，就像这样：</p><p>To display a message, write <code>alert(`hello world!`)</code>.<br>在这个<a href="https://gist.github.com/jorendorff/d3df45120ef8e4a342e5" target="_blank" rel="noopener">Gist</a>有具体代码细节，它由Markdown写成，所以你可以直接查看源代码。</p><p>转载：作者 Jason Orendorff  github主页  <a href="https://github.com/jorendorff">https://github.com/jorendorff</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入浅出ES6（四）：模板字符串&quot;&gt;&lt;a href=&quot;#深入浅出ES6（四）：模板字符串&quot; class=&quot;headerlink&quot; title=&quot;深入浅出ES6（四）：模板字符串&quot;&gt;&lt;/a&gt;深入浅出ES6（四）：模板字符串&lt;/h1&gt;&lt;h2 id=&quot;反撇号（-）基础知识&quot;&gt;&lt;a href=&quot;#反撇号（-）基础知识&quot; class=&quot;headerlink&quot; title=&quot;反撇号（`）基础知识&quot;&gt;&lt;/a&gt;反撇号（`）基础知识&lt;/h2&gt;&lt;p&gt;ES6引入了一种新型的字符串字面量语法，我们称之为模板字符串（template strings）。除了使用反撇号字符 ` 代替普通字符串的引号 ‘ 或 “ 外，它们看起来与普通字符串并无二致。在最简单的情况下，它们与普通字符串的表现一致：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context.fillText(`Ceci n&amp;apos;est pas une chaîne.`, x, y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="ES6" scheme="https://github.com/TongWenQian/TongWenQian/tags/ES6/"/>
    
      <category term="模板字符串" scheme="https://github.com/TongWenQian/TongWenQian/tags/%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>制作轮播2</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/06/03/%E5%88%B6%E4%BD%9C%E8%BD%AE%E6%92%AD2/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/06/03/制作轮播2/</id>
    <published>2019-06-03T09:12:48.000Z</published>
    <updated>2019-06-04T06:40:26.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将轮播进一步修改为无缝轮播"><a href="#将轮播进一步修改为无缝轮播" class="headerlink" title="将轮播进一步修改为无缝轮播"></a>将轮播进一步修改为无缝轮播</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用 js 精确控制哪一张显示，哪一张不显示。即不能让图片横向排开，而是每一张图片进行绝对定位，从而保证每张图片的独立性。<br><a id="more"></a><br><img src="/TongWenQian/2019/06/03/制作轮播2/lunbo2_silu.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>地址： <a href="https://github.com/TongWenQian/slides-2-demo">https://github.com/TongWenQian/slides-2-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;将轮播进一步修改为无缝轮播&quot;&gt;&lt;a href=&quot;#将轮播进一步修改为无缝轮播&quot; class=&quot;headerlink&quot; title=&quot;将轮播进一步修改为无缝轮播&quot;&gt;&lt;/a&gt;将轮播进一步修改为无缝轮播&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;用 js 精确控制哪一张显示，哪一张不显示。即不能让图片横向排开，而是每一张图片进行绝对定位，从而保证每张图片的独立性。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="作品制作" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/%E4%BD%9C%E5%93%81%E5%88%B6%E4%BD%9C/"/>
    
    
      <category term="轮播制作" scheme="https://github.com/TongWenQian/TongWenQian/tags/%E8%BD%AE%E6%92%AD%E5%88%B6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>制作轮播</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/06/03/%E5%88%B6%E4%BD%9C%E8%BD%AE%E6%92%AD/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/06/03/制作轮播/</id>
    <published>2019-06-02T16:00:09.000Z</published>
    <updated>2019-06-04T06:37:32.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="制作轮播"><a href="#制作轮播" class="headerlink" title="制作轮播"></a>制作轮播</h1><h2 id="欣赏轮播的例子"><a href="#欣赏轮播的例子" class="headerlink" title="欣赏轮播的例子"></a>欣赏轮播的例子</h2><ol><li>苹果风格的轮播<br>Demo: <a href="http://demo.tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/demo.html" target="_blank" rel="noopener">http://demo.tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/demo.html</a><br>英文教程： <a href="http://tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/" target="_blank" rel="noopener">http://tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/</a></li><li>科技感十足的轮播<br>Demo: <a href="http://idangero.us/swiper/" target="_blank" rel="noopener">http://idangero.us/swiper/</a><br>源码： <a href="https://github.com/nolimits4web/swiper/">https://github.com/nolimits4web/swiper/</a><a id="more"></a></li><li>轮播组件（可以直接使用）<br>预览： <a href="http://idangero.us/swiper/demos/" target="_blank" rel="noopener">http://idangero.us/swiper/demos/</a><br>GitHub： <a href="https://github.com/nolimits4web/swiper/">https://github.com/nolimits4web/swiper/</a></li></ol><h2 id="轮播的思路"><a href="#轮播的思路" class="headerlink" title="轮播的思路"></a>轮播的思路</h2><p>显示一个小窗口，图片放置在小窗口的后面，超出小窗口的图片 overflow:hidden 即可。移动图片实现轮播。<br><img src="lunbo_1.png" alt></p><h2 id="开始制作轮播"><a href="#开始制作轮播" class="headerlink" title="开始制作轮播"></a>开始制作轮播</h2><h3 id="做一个粗略的轮播"><a href="#做一个粗略的轮播" class="headerlink" title="做一个粗略的轮播"></a>做一个粗略的轮播</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**html**/</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .images&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items:flex-start;   </span><br><span class="line">      transition: transform 0.5s;</span><br><span class="line">    &#125;</span><br><span class="line">    .images&gt;img&#123;</span><br><span class="line">      vertical-align:top;</span><br><span class="line">    &#125;</span><br><span class="line">    .window&#123;</span><br><span class="line">      width:300px;</span><br><span class="line">      overflow:hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;window&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;images&quot; id=images&gt;</span><br><span class="line">      &lt;img src=&quot;https://fthmb.tqn.com/0ui_Zw01Ht9NHJkSBlqOIC1IH44=/960x0/filters:no_upscale()/yorkshire-terrier-583788122-581630e85f9b581c0b018a00.jpg&quot; width=300 alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;https://canna-pet.com/wp-content/uploads/2017/06/20-longest-living-dog-breeds_canna-pet-e1498599846169.jpg&quot; width=300 alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;https://fthmb.tqn.com/0ui_Zw01Ht9NHJkSBlqOIC1IH44=/960x0/filters:no_upscale()/yorkshire-terrier-583788122-581630e85f9b581c0b018a00.jpg&quot; width=300 alt=&quot;&quot; height=200&gt;</span><br><span class="line">      &lt;img src=&quot;https://canna-pet.com/wp-content/uploads/2017/06/20-longest-living-dog-breeds_canna-pet-e1498599846169.jpg&quot; width=300 alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;button id=&quot;p1&quot;&gt;第1张&lt;/button&gt;</span><br><span class="line"> &lt;button id=&quot;p2&quot;&gt;第2张&lt;/button&gt;</span><br><span class="line"> &lt;button id=&quot;p3&quot;&gt;第3张&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**js**/</span><br><span class="line">$(p1).on(&apos;click&apos;,function()&#123;</span><br><span class="line">  $(images).css(&#123;</span><br><span class="line">    transform: &apos;translateX(0)&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">$(p2).on(&apos;click&apos;,function()&#123;</span><br><span class="line">  $(images).css(&#123;</span><br><span class="line">    transform: &apos;translateX(-300px)&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">$(p3).on(&apos;click&apos;,function()&#123;</span><br><span class="line">  $(images).css(&#123;</span><br><span class="line">    transform: &apos;translateX(-600px)&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>预览： <a href="http://js.jirengu.com/rutafinori/9/edit" target="_blank" rel="noopener">http://js.jirengu.com/rutafinori/9/edit</a><br><a class="jsbin-embed" href="http://js.jirengu.com/rutafinori/9/embed" target="_blank" rel="noopener">JS Bin</a><script src="http://js.jirengu.com/js/embed.js"></script></p><h2 id="改进轮播"><a href="#改进轮播" class="headerlink" title="改进轮播"></a>改进轮播</h2><ol><li><p>首先，肯定想到要避免 js 操作 css。（见“内容、样式、行为分离的理解”），但是这个例子中严格分离的话代码变得更复杂麻烦了，因此这里稍微违反一下，灵活运用。<br><img src="lunbo_2.png" alt></p><p><img src="lunbo_3.png" alt></p></li><li><p>实现图片自动播放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> /**html**/</span><br><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .images&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items:flex-start;   </span><br><span class="line">      transition: transform 0.5s;</span><br><span class="line">    &#125;</span><br><span class="line">    .images&gt;img&#123;</span><br><span class="line">      vertical-align:top;</span><br><span class="line">    &#125;</span><br><span class="line">    .window&#123;</span><br><span class="line">      width:300px;</span><br><span class="line">      overflow:hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;window&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;images&quot; id=images&gt;</span><br><span class="line">      &lt;img src=&quot;https://fthmb.tqn.com/0ui_Zw01Ht9NHJkSBlqOIC1IH44=/960x0/filters:no_upscale()/yorkshire-terrier-583788122-581630e85f9b581c0b018a00.jpg&quot; width=300 alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;https://canna-pet.com/wp-content/uploads/2017/06/20-longest-living-dog-breeds_canna-pet-e1498599846169.jpg&quot; width=300 alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;https://fthmb.tqn.com/0ui_Zw01Ht9NHJkSBlqOIC1IH44=/960x0/filters:no_upscale()/yorkshire-terrier-583788122-581630e85f9b581c0b018a00.jpg&quot; width=300 alt=&quot;&quot; height=200&gt;</span><br><span class="line">      &lt;img src=&quot;https://canna-pet.com/wp-content/uploads/2017/06/20-longest-living-dog-breeds_canna-pet-e1498599846169.jpg&quot; width=300 alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;https://fthmb.tqn.com/0ui_Zw01Ht9NHJkSBlqOIC1IH44=/960x0/filters:no_upscale()/yorkshire-terrier-583788122-581630e85f9b581c0b018a00.jpg&quot; width=300 alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;span id=buttons&gt;</span><br><span class="line">    &lt;span&gt;第1张&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;第2张&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;第3张&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;第4张&lt;/span&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> /**js**/</span><br><span class="line"> var allButtons = $(&apos;#buttons&gt;span&apos;)</span><br><span class="line">for(let i=0;i&lt;allButtons.length;i++)&#123;</span><br><span class="line">  $(allButtons[i]).on(&apos;click&apos;,function(x)&#123;</span><br><span class="line">    var index = $(x.currentTarget).index()</span><br><span class="line">    var p = index*-300</span><br><span class="line">    $(&apos;#images&apos;).css(&#123;</span><br><span class="line">      transform: &apos;translateX(&apos;+p+&apos;px)&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    n = index</span><br><span class="line">    activeButton(allButtons.eq(n))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var n = 0;</span><br><span class="line">var size = allButtons.length</span><br><span class="line">playSlide(n%size)</span><br><span class="line"></span><br><span class="line">var timeId = setTimer()</span><br><span class="line"></span><br><span class="line">$(&apos;.window&apos;).on(&apos;mouseenter&apos;,function()&#123;</span><br><span class="line">  window.clearInterval(timeId)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&apos;.window&apos;).on(&apos;mouseleave&apos;,function()&#123;</span><br><span class="line">  timeId = setTimer()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function activeButton($button)&#123;</span><br><span class="line">  $button</span><br><span class="line">  .addClass(&apos;red&apos;)</span><br><span class="line">  .siblings(&apos;.red&apos;).removeClass(&apos;red&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function playSlide(index)&#123;</span><br><span class="line">  allButtons.eq(index).trigger(&apos;click&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setTimer()&#123;</span><br><span class="line">  return setInterval(()=&gt;&#123;</span><br><span class="line">  n += 1</span><br><span class="line">  playSlide(n%size)</span><br><span class="line">&#125;,1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> /**css**/</span><br><span class="line"> .red&#123;</span><br><span class="line">  color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>预览： <a href="http://js.jirengu.com/rumemisoji/3/edit" target="_blank" rel="noopener">http://js.jirengu.com/rumemisoji/3/edit</a><br><a class="jsbin-embed" href="http://js.jirengu.com/rumemisoji/3/embed" target="_blank" rel="noopener">JS Bin</a><script src="http://js.jirengu.com/js/embed.js"></script></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;制作轮播&quot;&gt;&lt;a href=&quot;#制作轮播&quot; class=&quot;headerlink&quot; title=&quot;制作轮播&quot;&gt;&lt;/a&gt;制作轮播&lt;/h1&gt;&lt;h2 id=&quot;欣赏轮播的例子&quot;&gt;&lt;a href=&quot;#欣赏轮播的例子&quot; class=&quot;headerlink&quot; title=&quot;欣赏轮播的例子&quot;&gt;&lt;/a&gt;欣赏轮播的例子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;苹果风格的轮播&lt;br&gt;Demo: &lt;a href=&quot;http://demo.tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/demo.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://demo.tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/demo.html&lt;/a&gt;&lt;br&gt;英文教程： &lt;a href=&quot;http://tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tutorialzine.com/2009/11/beautiful-apple-gallery-slideshow/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;科技感十足的轮播&lt;br&gt;Demo: &lt;a href=&quot;http://idangero.us/swiper/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://idangero.us/swiper/&lt;/a&gt;&lt;br&gt;源码： &lt;a href=&quot;https://github.com/nolimits4web/swiper/&quot;&gt;https://github.com/nolimits4web/swiper/&lt;/a&gt;
    
    </summary>
    
      <category term="前端" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="作品制作" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/%E4%BD%9C%E5%93%81%E5%88%B6%E4%BD%9C/"/>
    
    
      <category term="轮播" scheme="https://github.com/TongWenQian/TongWenQian/tags/%E8%BD%AE%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>内容、样式、行为分离的理解</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/06/02/%E5%86%85%E5%AE%B9%E6%A0%B7%E5%BC%8F%E8%A1%8C%E4%B8%BA%E5%88%86%E7%A6%BB%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/06/02/内容样式行为分离的理解/</id>
    <published>2019-06-02T15:24:03.000Z</published>
    <updated>2019-06-04T06:38:04.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS-JS-内容、样式与行为分离的理解"><a href="#HTML-CSS-JS-内容、样式与行为分离的理解" class="headerlink" title="HTML , CSS , JS 内容、样式与行为分离的理解"></a>HTML , CSS , JS 内容、样式与行为分离的理解</h1><ol><li>这个问题与人为什么要吃饭一样，正面回答十分麻烦。对于这种看似理所应当的问题，反方向回答</li><li>格式：如果不。。。/如果这样，会导致什么后果<a id="more"></a></li><li><p>回答：</p><ul><li>如果 HTML 负责样式，会使 HTML 很复杂（有的标签标示内容，有的标签标示样式），很难区分这些标签的逻辑结构。</li><li><p>如果 CSS 标示内容，用户选不中，JS也很难取到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//举例：</span><br><span class="line">/**html**/</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">/**css**/</span><br><span class="line">div::after&#123;</span><br><span class="line">    content:&apos;你好&apos;</span><br><span class="line">&#125;</span><br><span class="line">/**js**/</span><br><span class="line">console.log(x.innerText)//控制台取不到“你好”</span><br><span class="line">//显示出来的“你好”用户也选不中</span><br></pre></td></tr></table></figure></li><li><p>如果 CSS 负责行为，若是 CSS 中有很多很复杂的逻辑，会使得 CSS 很慢，导致网页也会变慢。</p></li><li>如果 JS 控制样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//举例：$div.show(),$div.hide() 一般是禁止使用的</span><br><span class="line">/**html**/</span><br><span class="line">&lt;div id=x&gt;你好&lt;/div&gt;//display:flex</span><br><span class="line">/**js**/</span><br><span class="line">var $div = $(&apos;#x&apos;)</span><br><span class="line">$div.hide()//display:none</span><br><span class="line">$div.show()//display:flex ,不是 block</span><br><span class="line">//若div最初的display为none，则$div.show()之后display为block，十分不准，很难预测</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML-CSS-JS-内容、样式与行为分离的理解&quot;&gt;&lt;a href=&quot;#HTML-CSS-JS-内容、样式与行为分离的理解&quot; class=&quot;headerlink&quot; title=&quot;HTML , CSS , JS 内容、样式与行为分离的理解&quot;&gt;&lt;/a&gt;HTML , CSS , JS 内容、样式与行为分离的理解&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;这个问题与人为什么要吃饭一样，正面回答十分麻烦。对于这种看似理所应当的问题，反方向回答&lt;/li&gt;
&lt;li&gt;格式：如果不。。。/如果这样，会导致什么后果
    
    </summary>
    
      <category term="前端" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端问题汇总" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
    
      <category term="前端问题" scheme="https://github.com/TongWenQian/TongWenQian/tags/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>了解jQuery</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/06/02/%E4%BA%86%E8%A7%A3jQuery/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/06/02/了解jQuery/</id>
    <published>2019-06-02T06:23:31.000Z</published>
    <updated>2019-06-02T13:34:28.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-简介"><a href="#jQuery-简介" class="headerlink" title="jQuery 简介"></a>jQuery 简介</h1><blockquote><p>jQuery 是目前使用最广泛的 javascript 函数库。<br>据统计，全世界排名前100万的网站，有46%使用 jQuery，远远超过其他库。微软公司甚至把 jQuery 作为他们的官方库。<br>对于网页开发者来说，学会 jQuery 是必要的。因为它让你了解业界最通用的技术，为将来学习更高级的库打下基础，并且确实可以很轻松地做出许多复杂的效果。<br>虽然 jQuery 上手简单，比其他库容易学会，但是要全面掌握，却不轻松。因为它涉及到网页开发的方方面面，提供的各种方法和内部变化有上千种之多。初学者常常感到，入门很方便，提高很困难。<br> <a id="more"></a><br>目前，互联网上最好的 jQuery 入门教材，是 Rebecca Murphey 写的《jQuery基础》（jQuery Fundamentals）。在 Google 里搜索“jQuery培训”，此书排在第一位。jQuery 官方团队已经同意，把此书作为官方教程的基础。  </p></blockquote><h1 id="了解-jQuery"><a href="#了解-jQuery" class="headerlink" title="了解 jQuery"></a>了解 jQuery</h1><h2 id="自己动手封装函数"><a href="#自己动手封装函数" class="headerlink" title="自己动手封装函数"></a>自己动手封装函数</h2><p>首先，尝试自己封装函数，分别是：  </p><ol><li>function getSiblings(node){}  </li><li><p>function addClass(node, classes){}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**HTML**/</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li id=&quot;item1&quot;&gt;选项1&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item2&quot;&gt;选项2&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item3&quot;&gt;选项3&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item4&quot;&gt;选项4&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item5&quot;&gt;选项5&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**JS**/</span><br><span class="line">function getSiblings(node)&#123;/*API*/</span><br><span class="line">  var allChildren = node.parentNode.children</span><br><span class="line">  var array = &#123;</span><br><span class="line">     length: 0</span><br><span class="line">  &#125;</span><br><span class="line">  for(let i=0;i&lt;allChildren.length;i++)&#123;</span><br><span class="line">     if(allChildren[i] !== item3)&#123;</span><br><span class="line">        array[array.length] = allChildren[i]</span><br><span class="line">        array.length += 1</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array</span><br><span class="line">&#125; </span><br><span class="line">console.log(getSiblings(item3))</span><br><span class="line"></span><br><span class="line">function addClass(node,classes)&#123;</span><br><span class="line">   for(let key in classes)&#123;</span><br><span class="line">      var value = classes[key]</span><br><span class="line">      if(value)&#123;</span><br><span class="line">         node.classList.add(key)</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">         node.classList.remove(key)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">addClass(item3,&#123;a:true,b:false,c:true&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>为了让上面两个API看起来是相关联的，那么就声明一个变量tdom，使它们有关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**JS**/</span><br><span class="line">window.tdom = &#123;&#125;</span><br><span class="line">tdom.getSiblings = getSiblings</span><br><span class="line">tdom.addClass = addClass</span><br><span class="line"></span><br><span class="line">tdom.getSinblings(item3)</span><br><span class="line">tdom.addClass(item3,&#123;a:true,b:false,c:true&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var dom = &#123;&#125;</span><br><span class="line">dom.getSiblings(node)</span><br><span class="line">dom.addClass(node, &#123;a: true, b: false&#125;)</span><br></pre></td></tr></table></figure><h2 id="进一步，改-node-原型"><a href="#进一步，改-node-原型" class="headerlink" title="进一步，改 node 原型"></a>进一步，改 node 原型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**CSS**/</span><br><span class="line">.blue&#123;</span><br><span class="line">  color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**JS**/</span><br><span class="line">window.tdom = &#123;&#125; /*yui*/</span><br><span class="line">ffdom.getSiblings = function (node) &#123; /* API */</span><br><span class="line">  var allChildren = node.parentNode.children</span><br><span class="line"></span><br><span class="line">  var array = &#123;</span><br><span class="line">    length: 0</span><br><span class="line">  &#125;</span><br><span class="line">  for (let i = 0; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">    if (allChildren[i] !== node) &#123;</span><br><span class="line">      array[array.length] = allChildren[i]</span><br><span class="line">      array.length += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array</span><br><span class="line">&#125;</span><br><span class="line">tdom.addClass = function (node, classes) &#123;</span><br><span class="line">  classes.forEach( (value) =&gt; node.classList.add(value) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tdom.getSiblings(item3)</span><br><span class="line">tdom.addClass(item3, [&apos;blue&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line"></span><br><span class="line">Node.prototype.getSiblings = function()&#123;</span><br><span class="line">  var allChildren = this.parentNode.children</span><br><span class="line"></span><br><span class="line">  var array = &#123;</span><br><span class="line">    length: 0</span><br><span class="line">  &#125;</span><br><span class="line">  for (let i = 0; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">    if (allChildren[i] !== this) &#123;</span><br><span class="line">      array[array.length] = allChildren[i]</span><br><span class="line">      array.length += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array</span><br><span class="line">&#125;</span><br><span class="line">item3.getSiblings()</span><br></pre></td></tr></table></figure><h2 id="能不能把-node-放在前面"><a href="#能不能把-node-放在前面" class="headerlink" title="能不能把 node 放在前面"></a>能不能把 node 放在前面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.getSiblings()</span><br><span class="line">node.addClass()</span><br></pre></td></tr></table></figure><ol><li>方法一：扩展 Node 接口<br>直接在 Node.prototype 上加函数</li><li><p>方法二：新的接口 BetterNode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Node2(node)&#123;</span><br><span class="line"> return &#123;</span><br><span class="line">     element: node,</span><br><span class="line">     getSiblings: function()&#123;</span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line">     addClass: function()&#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">let node =document.getElementById(&apos;x&apos;)</span><br><span class="line">let node2 = Node2(node)</span><br><span class="line">node2.getSiblings()</span><br><span class="line">node2.addClass()</span><br></pre></td></tr></table></figure><p>第二种叫做“无侵入”</p></li></ol><h2 id="把-Node2-改个名字吧"><a href="#把-Node2-改个名字吧" class="headerlink" title="把 Node2 改个名字吧"></a>把 Node2 改个名字吧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function jQuery(node)&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        element: node,</span><br><span class="line">        getSiblings: function()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        addClass: function()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let node =document.getElementById(&apos;x&apos;)</span><br><span class="line">let node2 =jQuery(node)</span><br><span class="line">node2.getSiblings()</span><br><span class="line">node2.addClass()</span><br></pre></td></tr></table></figure><h2 id="再给个缩写吧-alias"><a href="#再给个缩写吧-alias" class="headerlink" title="再给个缩写吧 alias"></a>再给个缩写吧 alias</h2><p>window.$ = jQuery</p><h1 id="jQuery-中文文档"><a href="#jQuery-中文文档" class="headerlink" title="jQuery 中文文档"></a>jQuery 中文文档</h1><p>地址：<a href="http://cndevdocs.com/" target="_blank" rel="noopener">http://cndevdocs.com/</a></p><ul><li><p>根据jQuery中文文档，以.addClass()为例的简单使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**HTML**/</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;选项1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;选项2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;选项3&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;选项4&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;选项5&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;button id=&quot;x&quot;&gt;x&lt;button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**CSS**/</span><br><span class="line">.red&#123;</span><br><span class="line">   color:red;</span><br><span class="line">&#125;</span><br><span class="line">.blue&#123;</span><br><span class="line">   color:blue;</span><br><span class="line">&#125;</span><br><span class="line">.green&#123;</span><br><span class="line">   color:green;</span><br><span class="line">&#125;</span><br><span class="line">.yellow&#123;</span><br><span class="line">   color:yellow;</span><br><span class="line">&#125;</span><br><span class="line">.black&#123;</span><br><span class="line">   color:black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**JS**/</span><br><span class="line">var nodes = jQuery(&apos;ul&gt;li&apos;)</span><br><span class="line">//例子1</span><br><span class="line">nodes.addClass(&apos;red&apos;)</span><br><span class="line">//例子2</span><br><span class="line">x.onclick = function()&#123;</span><br><span class="line">   nodes.toggleClass(&apos;red&apos;)//toggle切换 开关</span><br><span class="line">&#125;</span><br><span class="line">//例子3</span><br><span class="line">var classes = &#123;&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;,&apos;yellow&apos;,&apos;black&apos;&#125;</span><br><span class="line">x.onclick = function()&#123;</span><br><span class="line">   nodes.addClass(function(index,currentClass)&#123;</span><br><span class="line">      return classes[index]</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="jQuery-优点"><a href="#jQuery-优点" class="headerlink" title="jQuery 优点"></a>jQuery 优点</h1><ol><li>jQuery 在兼容性方面做得很好，1.7 版本兼容到 IE 6</li><li>jQuery 还有动画、AJAX 等模块，不止 DOM 操作</li><li>jQuery 的功能更丰富</li><li>jQuery 使用了 prototype</li></ol><p>参考：<br><a href="http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery-简介&quot;&gt;&lt;a href=&quot;#jQuery-简介&quot; class=&quot;headerlink&quot; title=&quot;jQuery 简介&quot;&gt;&lt;/a&gt;jQuery 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;jQuery 是目前使用最广泛的 javascript 函数库。&lt;br&gt;据统计，全世界排名前100万的网站，有46%使用 jQuery，远远超过其他库。微软公司甚至把 jQuery 作为他们的官方库。&lt;br&gt;对于网页开发者来说，学会 jQuery 是必要的。因为它让你了解业界最通用的技术，为将来学习更高级的库打下基础，并且确实可以很轻松地做出许多复杂的效果。&lt;br&gt;虽然 jQuery 上手简单，比其他库容易学会，但是要全面掌握，却不轻松。因为它涉及到网页开发的方方面面，提供的各种方法和内部变化有上千种之多。初学者常常感到，入门很方便，提高很困难。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="jQuery" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://github.com/TongWenQian/TongWenQian/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Windows下命令行常用技巧</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/05/31/Windows%E4%B8%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/05/31/Windows下命令行常用技巧/</id>
    <published>2019-05-31T13:26:01.000Z</published>
    <updated>2019-06-01T12:13:27.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用z进行快速跳跃"><a href="#使用z进行快速跳跃" class="headerlink" title="使用z进行快速跳跃"></a>使用z进行快速跳跃</h1><ol><li><code>mkdir ~/repos</code></li><li><code>cd ~/repos</code></li><li><code>git clone https://github.com/rupa/z.git</code></li><li><code>touch ~/.bashrc</code></li><li><p><code>start ~/.bashrc</code><br>在文件里写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. ~/repos/z/z.sh </span><br><span class="line">alias j=&apos;z&apos;</span><br></pre></td></tr></table></figure></li><li><p>重启 Git Bash</p><a id="more"></a></li><li>你去过的所有目录都会被记录了！使用 j XXX 就可以快速到达之前去过的目录了！</li><li>使用 j 可以查看所有去过的目录<br>注意，~/repos/z/z.sh 不能删除，删除了就不能用了</li></ol><h1 id="使用-bash-alias-快速输入命令"><a href="#使用-bash-alias-快速输入命令" class="headerlink" title="使用 bash alias 快速输入命令"></a>使用 bash alias 快速输入命令</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>echo ‘xxx’ &gt; ~/.bashrc 会覆盖文件的所有内容，请提前备份 ~/.bashrc！！把 &gt; 换成 &gt;&gt; 才是追加内容</p><h2 id="代码-方便日后查阅"><a href="#代码-方便日后查阅" class="headerlink" title="代码(方便日后查阅)"></a>代码(方便日后查阅)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">. ~/GitHub/z/z.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export PYTHONIOENCODING=UTF-8</span><br><span class="line">export LANG=&apos;en_US.UTF-8&apos;</span><br><span class="line">export LC_ALL=&apos;en_US.UTF-8&apos;</span><br><span class="line"></span><br><span class="line">alias j=&apos;z&apos;</span><br><span class="line">alias gst=&quot;git status -sb&quot;</span><br><span class="line">alias ga=&quot;git add&quot;</span><br><span class="line">alias gc=&quot;git commit -v&quot;</span><br><span class="line">alias gcc=&quot;git commit . -m update&quot;</span><br><span class="line">alias gp=&quot;git push&quot;</span><br><span class="line">alias gl=&quot;git pull&quot;</span><br><span class="line">alias open=&quot;start&quot;</span><br><span class="line">alias ll=&quot;ls -la&quot;</span><br><span class="line">alias glog=&quot;git log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit -- | less&quot;</span><br></pre></td></tr></table></figure><h1 id="让Windows支持tree"><a href="#让Windows支持tree" class="headerlink" title="让Windows支持tree"></a>让Windows支持tree</h1><ol><li>下载 GnuTree.exe 双击安装，一路下一步（注意安装路径里不要有空格，建议安装在 C:\Software\GnuWin32</li><li>将 C:\Software\GnuWin32\bin 添加到 PATH 里，添加方法如下：<br>i. Git Bash 添加方法<pre><code>a. 运行 touch ~/.bashrc; echo &apos;export PATH=&quot;$PATH:/c/Software/GnuWin32/bin/&quot;&apos; &gt;&gt; ~/.bashrcb. 重启 Git Bash</code></pre>ii. 图形界面添加方法（推荐使用上面一种方法）<pre><code>a. 在 Windows 的环境变量 PATH 里添加 C:\Software\GnuWin32\binb. 如果不知道 Windows 怎么添加环境变量 PATH，百度『Windows 环境变量 PATH』即可</code></pre></li><li>然后你就可以运行 tree 命令了</li></ol><h1 id="安装curl"><a href="#安装curl" class="headerlink" title="安装curl"></a>安装curl</h1><ol><li>搜索 scoop.sh ，按照官网要求安装(卸载： <code>uninstall scoop</code>)</li><li>打开 Windows PowerShell ，粘贴在官网复制的命令行</li><li>打开 Git Bash ，输入： <code>which scoop</code> 查看是否已经安装成功</li><li><code>scoop install curl</code></li></ol><h1 id="命令行快捷翻译（fy-xxx）"><a href="#命令行快捷翻译（fy-xxx）" class="headerlink" title="命令行快捷翻译（fy xxx）"></a>命令行快捷翻译（fy xxx）</h1><ol><li><code>npm i -g fanyi</code></li><li><code>echo &quot;alias yd=&#39;fanyi&#39;&quot; &gt;&gt; ~/.bashrc</code><br>如果提示 commond not found，就需要更新 PATH<br><code>export PATH=&quot;xxx:$PATH&quot;</code><br>其中 xxx 的示例为 /c/Users/lev/AppData/Roaming/npm</li></ol><h1 id="命令行常用快捷键"><a href="#命令行常用快捷键" class="headerlink" title="命令行常用快捷键"></a>命令行常用快捷键</h1><ul><li>Ctrl + R 搜索历史，再次 Ctrl + R 切换（按左右键，退出选择且并未执行；若直接按回车，退出选择且执行命令行）</li><li>Ctrl + A 行首</li><li>Ctrl + E 行尾</li><li>Ctrl + B 退后</li><li>Ctrl + F 前进</li><li>Ctrl + W 删一个单词</li><li>Ctrl + K 删掉这一行（首先要 Ctrl + A 来到行首才能删）</li><li>Ctrl + C 中断</li><li>Ctrl + G 退出搜索</li><li>Alt + . 使用上一行命令的最后一个参数</li></ul><h1 id="快捷复制粘贴"><a href="#快捷复制粘贴" class="headerlink" title="快捷复制粘贴"></a>快捷复制粘贴</h1><h2 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h2><ul><li>选中即为复制</li><li>按鼠标中键粘贴/Shift + insert</li></ul><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><ul><li>选中再回车复制</li><li>右键粘贴</li></ul><h1 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h1><h2 id="ConEmu"><a href="#ConEmu" class="headerlink" title="ConEmu"></a>ConEmu</h2><p>你也可以尝试 cmder， cmder 是基于 ConEmu 上面改的。</p><ol><li>Fira Mono For Powerline</li><li>一键呼起（本人设置F1）</li><li>分屏（本人设置上下分屏： Alt + Shift + D ，左右分屏： Alt + D ，退出分屏：点击某一个分屏，按 Ctrl + D)</li></ol><h2 id="剪切板管理软件-ClipboardFusion"><a href="#剪切板管理软件-ClipboardFusion" class="headerlink" title="剪切板管理软件 ClipboardFusion"></a>剪切板管理软件 ClipboardFusion</h2><p>Ctrl + Shift + v 历史复制内容查看</p><h2 id="截图软件-Snipaste"><a href="#截图软件-Snipaste" class="headerlink" title="截图软件 Snipaste"></a>截图软件 Snipaste</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用z进行快速跳跃&quot;&gt;&lt;a href=&quot;#使用z进行快速跳跃&quot; class=&quot;headerlink&quot; title=&quot;使用z进行快速跳跃&quot;&gt;&lt;/a&gt;使用z进行快速跳跃&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mkdir ~/repos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ~/repos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/rupa/z.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touch ~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;start ~/.bashrc&lt;/code&gt;&lt;br&gt;在文件里写：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;. ~/repos/z/z.sh &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias j=&amp;apos;z&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启 Git Bash&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Windows命令行技巧" scheme="https://github.com/TongWenQian/TongWenQian/tags/Windows%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo与GitHub建立博客</title>
    <link href="https://github.com/TongWenQian/TongWenQian/2019/05/31/Hexo%E4%B8%8EGitHub%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/TongWenQian/TongWenQian/2019/05/31/Hexo与GitHub建立博客/</id>
    <published>2019-05-31T09:12:01.000Z</published>
    <updated>2019-06-02T06:38:36.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h1><ol><li>进入一个安全的目录，比如 cd ~/Desktop 或者 cd ~/Documents，别在根目录 / 建博客。</li><li>在 GitHub 上新建一个空 repo，repo 名称是「你的用户名.github.io」（注意个用户名是你的GitHub用户名，不是你的电脑用户名）</li><li><code>npm install -g hexo-cli</code>，安装 Hexo</li><li><code>hexo init myBlog</code></li><li><code>cd myBlog</code></li><li><code>npm i</code></li><li><code>hexo new</code> 开博大吉，你会看到一个 md 文件的路径<a id="more"></a><img src="qianduan_hexo.png" alt>注意：Windows 的路径中的 \ 需要变成 / 才行</li><li><p>运行 start source/_post/开博大吉.md 来编辑这个 md 文件，内容自己想（Ubuntu 系统用 xdg-open xxxxxxxxxxxxxxxxxxx.md 命令）</p><ul><li>举例：如果 Windows 提示的是 INFO created: ~\Desktop\myBlog\source_posts\开博大吉.md<br>那么你的命令就应该是 start “~/Desktop/myBlog/source/_posts/开博大吉.md” 注意引号和斜杠，如果路径里没有空格，就不需要引号。</li><li>内容示例<br>-–<br>title: 开博大吉<br>-–</li></ul><p># 哈哈<br>我的博客开通啦</p></li><li><code>start _config.yml</code>，编辑网站配置<ul><li>把第 6 行的 title 改成你想要的名字</li><li>把第 9 行的 author 改成你的大名</li><li>把最后一行的 type 改成 <code>type: git</code></li><li>在最后一行后面新增一行，左边与 type 平齐，加上一行 <code>repo: 仓库地址</code> （请将仓库地址改为「你的用户名.github.io」对应的仓库地址，仓库地址以        <a href="mailto:git@github.com">git@github.com</a>: 开头。注意repo:后面有一个空格）</li></ul></li><li><code>npm install hexo-deployer-git --save</code>，安装 git 部署插件</li><li><code>hexo deploy</code></li><li>进入「你的用户名.github.io」对应的 repo，打开 GitHub Pages 功能，如果已经打开了，你应该会看到一个预览链接</li><li>用浏览器访问「预览链接/index.html」就应该看到了你的博客！（GitHub Pages 存在延迟，如果没看到，过三分钟再刷新看看）</li></ol><h1 id="第二篇博客"><a href="#第二篇博客" class="headerlink" title="第二篇博客"></a>第二篇博客</h1><ol><li><code>hexo new 第二篇博客</code></li><li>复制显示的路径，使用 start 路径 来编辑它</li><li><code>hexo generate</code></li><li><code>hexo deploy</code></li><li>去看你的博客，应该能看到第二篇博客了</li></ol><h1 id="换主题"><a href="#换主题" class="headerlink" title="换主题"></a>换主题</h1><ol><li><a href="https://github.com/hexojs/hexo/wiki/Themes">https://github.com/hexojs/hexo/wiki/Themes</a> 上面有主题合集</li><li>随便找一个主题，进入主题的 GitHub 首页，比如我找的是 <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></li><li>复制它的 SSH 地址或 HTTPS 地址，假设地址为 <a href="mailto:git@github.com">git@github.com</a>:iissnan/hexo-theme-next.git</li><li><code>cd myBlog</code></li><li><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li><li>将 _config.yml 的第 76 行改为 <code>theme: next</code>，保存</li><li><code>hexo generate</code></li><li><code>hexo deploy</code></li><li>等一分钟，然后刷新你的博客页面，你会看到一个新的外观。如果不喜欢这个主题，就回到第 1 步，重选一个主题。</li></ol><h1 id="上传源代码"><a href="#上传源代码" class="headerlink" title="上传源代码"></a>上传源代码</h1><p>注意「你的用户名.github.io」上保存的只是你的博客，并没有保存「生成博客的程序代码」，你需要再创建一个名为 blog-generator 的空仓库，用来保存 myBlog  里面的「生成博客的程序代码」。</p><ol><li>在 GitHub 创建 blog-generator 空仓库<br><img src="qianduan_hexo2.png" alt="按照截图中的命令执行即可"></li><li>按照截图中的命令执行即可</li></ol><p>这样一来，你的博客发布在了「你的用户名.github.io」而你的「生成博客的程序代码」发布在了 blog-generator。所有数据万无一失，你就不会因为误删 myBlog 目录而痛哭了。<br>以后每次 hexo deploy 完之后，博客就会更新；然后你还要要 add / commit /push 一下「生成博客的程序代码」，以防万一。<br>这个 blog-generator 就是用来生成博客的程序，而「你的用户名.github.io」仓库就是你的博客页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主要步骤&quot;&gt;&lt;a href=&quot;#主要步骤&quot; class=&quot;headerlink&quot; title=&quot;主要步骤&quot;&gt;&lt;/a&gt;主要步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;进入一个安全的目录，比如 cd ~/Desktop 或者 cd ~/Documents，别在根目录 / 建博客。&lt;/li&gt;
&lt;li&gt;在 GitHub 上新建一个空 repo，repo 名称是「你的用户名.github.io」（注意个用户名是你的GitHub用户名，不是你的电脑用户名）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install -g hexo-cli&lt;/code&gt;，安装 Hexo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo init myBlog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd myBlog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo new&lt;/code&gt; 开博大吉，你会看到一个 md 文件的路径
    
    </summary>
    
      <category term="前端" scheme="https://github.com/TongWenQian/TongWenQian/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="hexo" scheme="https://github.com/TongWenQian/TongWenQian/tags/hexo/"/>
    
      <category term="github" scheme="https://github.com/TongWenQian/TongWenQian/tags/github/"/>
    
  </entry>
  
</feed>
